*----------------------------------------------------------------------*
*   INCLUDE RVMESSAGE                                                  *
*----------------------------------------------------------------------*
* Meldungstypen
constants: type_a value 'A',
           type_e value 'E',
           type_i value 'I',
           type_s value 'S',
           type_w value 'W'.

* Message Objekt
constants:
  msg_object_lord   like balhdr-object value if_sd_sls_message=>co_bal_object-lord,
  msg_object_sd_sls like balhdr-object value if_sd_sls_message=>co_bal_object-sd_sls.

* Meldungsgruppen
constants:
  msgg_copy_item        like balhdr-subobject value 'COPY_ITEM',
  msgg_copy_header      like balhdr-subobject value 'COPY_HDR',
  msgg_check_item       like balhdr-subobject value 'CHECK_ITEM',
  msgg_check_header     like balhdr-subobject value 'CHECK_HDR',
  msgg_check_delivsched like balhdr-subobject value 'CHECK_DELIV_SCHED',
  msgg_type_matching    like balhdr-subobject value 'TYPE_MATCHING',
  msgg_ppma             like balhdr-subobject value 'PPMA',
  msgg_rmba             like balhdr-subobject value 'RMBA',
  msgg_check_dlfl       like balhdr-subobject value 'CHECK_DLFL',
  msgg_obligo           like balhdr-subobject value 'OBLIGO',
  msgg_tm_int           like balhdr-subobject value 'TM_INT',
  msgg_comp_gen         like balhdr-subobject value 'COMP_INTE'.

data: l_flag type flag.

* Makro zum Nachrichtensammeln
* Argument 1: Meldungsgruppe
* Argument 2: Meldungstyp
define message_collect.
  move-corresponding sy to mess.
  mess-msgty = &2.
  if &2 is not initial.
    sy-msgty = &2.
  endif.
  message_collect_lord.
  call function 'SD_MESSAGE_COLLECT'
    exporting
      i_mesg   = mess
      i_object = msg_object_sd_sls
      i_group  = &1
      i_vbak   = vbak
      i_vbap   = vbap
      i_vbep   = vbep.
  hinweis_protokoll_show = charx.
end-of-definition.

define message_collect_no_save.

  message id     &1
          type   &2
          number &3
          with   &4 &5 &6 &7
          display like 'E'.

  if call_activity eq gc_activity_lord.
    message_collect_lord.
    message w033(sls_lord) with vbak-vbeln.
    message_collect_lord.
  endif.

  fcode = fcode_gleiche_seite.
  perform fcode_bearbeiten.

  return.

end-of-definition.

* message log for lean order processing
define message_collect_lord.

  if call_activity eq gc_activity_lord.
    move-corresponding sy to mess.
    call function 'APPL_LOG_WRITE_SINGLE_MESSAGE'
      exporting
        object  = msg_object_lord
        message = mess.
  endif.

end-of-definition.

* message log for credit case
define message_collect_credit_case.
* check activation of SAP Creditmanagement
  CALL FUNCTION 'UKM_IS_ACTIVE'
    IMPORTING
      E_DCD_ACTIVE = l_flag.
  IF NOT l_flag IS INITIAL.
    move-corresponding sy to mess.
    call function 'APPL_LOG_WRITE_SINGLE_MESSAGE'
      exporting
        object  = 'SD_CREDIT_CHECK'
        message = mess.
  ENDIF.
end-of-definition.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.4.6 - E.G.Mellodew. 1998-2024. Sap Release 754
